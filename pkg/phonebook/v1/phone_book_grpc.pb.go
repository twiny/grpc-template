// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package phonebookv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhonebookStoreServiceClient is the client API for PhonebookStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhonebookStoreServiceClient interface {
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	PutContact(ctx context.Context, in *PutContactRequest, opts ...grpc.CallOption) (*PutContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
	ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
}

type phonebookStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhonebookStoreServiceClient(cc grpc.ClientConnInterface) PhonebookStoreServiceClient {
	return &phonebookStoreServiceClient{cc}
}

func (c *phonebookStoreServiceClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, "/phonebook.v1.PhonebookStoreService/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonebookStoreServiceClient) PutContact(ctx context.Context, in *PutContactRequest, opts ...grpc.CallOption) (*PutContactResponse, error) {
	out := new(PutContactResponse)
	err := c.cc.Invoke(ctx, "/phonebook.v1.PhonebookStoreService/PutContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonebookStoreServiceClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	out := new(DeleteContactResponse)
	err := c.cc.Invoke(ctx, "/phonebook.v1.PhonebookStoreService/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonebookStoreServiceClient) ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := c.cc.Invoke(ctx, "/phonebook.v1.PhonebookStoreService/ListContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhonebookStoreServiceServer is the server API for PhonebookStoreService service.
// All implementations should embed UnimplementedPhonebookStoreServiceServer
// for forward compatibility
type PhonebookStoreServiceServer interface {
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	PutContact(context.Context, *PutContactRequest) (*PutContactResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
	ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error)
}

// UnimplementedPhonebookStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPhonebookStoreServiceServer struct {
}

func (UnimplementedPhonebookStoreServiceServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedPhonebookStoreServiceServer) PutContact(context.Context, *PutContactRequest) (*PutContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutContact not implemented")
}
func (UnimplementedPhonebookStoreServiceServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedPhonebookStoreServiceServer) ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContacts not implemented")
}

// UnsafePhonebookStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhonebookStoreServiceServer will
// result in compilation errors.
type UnsafePhonebookStoreServiceServer interface {
	mustEmbedUnimplementedPhonebookStoreServiceServer()
}

func RegisterPhonebookStoreServiceServer(s grpc.ServiceRegistrar, srv PhonebookStoreServiceServer) {
	s.RegisterService(&PhonebookStoreService_ServiceDesc, srv)
}

func _PhonebookStoreService_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookStoreServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phonebook.v1.PhonebookStoreService/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookStoreServiceServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhonebookStoreService_PutContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookStoreServiceServer).PutContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phonebook.v1.PhonebookStoreService/PutContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookStoreServiceServer).PutContact(ctx, req.(*PutContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhonebookStoreService_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookStoreServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phonebook.v1.PhonebookStoreService/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookStoreServiceServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhonebookStoreService_ListContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookStoreServiceServer).ListContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phonebook.v1.PhonebookStoreService/ListContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookStoreServiceServer).ListContacts(ctx, req.(*ListContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhonebookStoreService_ServiceDesc is the grpc.ServiceDesc for PhonebookStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhonebookStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phonebook.v1.PhonebookStoreService",
	HandlerType: (*PhonebookStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContact",
			Handler:    _PhonebookStoreService_GetContact_Handler,
		},
		{
			MethodName: "PutContact",
			Handler:    _PhonebookStoreService_PutContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _PhonebookStoreService_DeleteContact_Handler,
		},
		{
			MethodName: "ListContacts",
			Handler:    _PhonebookStoreService_ListContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phonebook/v1/phone_book.proto",
}
